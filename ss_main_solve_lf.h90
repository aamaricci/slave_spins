subroutine ss_lf_solve()
  real(8),dimension(Nso)     :: lambda
  real(8),dimension(Nso)     :: Xvec,Fvec
  !< Setup:
  if(Nspin==1)call ss_spin_symmetry(ss_lambda)
  !
  if(verbose>2)call start_timer()
  fconverged = .false.; fiter=0 
  do while(.not.fconverged.AND.fiter<=loop_Nitermax)
     fiter=fiter+1
     call start_loop(fiter,loop_Nitermax,"Fermion-iter")
     !
     lambda = ss_lambda(:Nspin*Norb)    !get a guess to start the Css: n=Sz+1/2 optimization
     call ss_solve_fermions_Ef
     if(verbose>3)write(*,"(A6,12G18.9)")"mu   =",xmu
     if(verbose>3)write(*,"(A6,12G18.9)")"C    =",ss_c
     if(verbose>2)write(*,"(A6,12G18.9)")"N    =",ss_dens(:Nspin*Norb),sum(ss_dens),filling
     if(verbose>1)write(*,"(3A18)")"Iter","Fss","Lambda"
     !
     siter  = 0
     Xvec   = ss_zeta(:Nspin*Norb)
     call broyden1(solve_Hps,lambda,tolf=solve_tolerance)
     !call fsolve(solve_Hps,lambda,tol=constraint_tolerance,info=info)
     Fvec   = ss_zeta(:Nspin*Norb) - Xvec
     !
     call linear_mix(Xvec,Fvec,loop_Wmix)
     ! call adaptive_mix(Xvec,Fvec,loop_Wmix,fiter)
     ! call broyden_mix(Xvec,Fvec,loop_Wmix,loop_Nmix,fiter)
     ! ss_zeta(:Nspin*Norb)     = Xvec
     if(verbose>2)write(*,"(A6,12G18.9,I4)")"Z_ss =",ss_zeta(:Nspin*Norb),info
     !
     fconverged = check_convergence(ss_zeta(:Nspin*Norb),loop_tolerance,Nsuccess,loop_Nitermax)
     call end_loop()
  end do
  !
  if(verbose>1)then
     write(*,"(A7,12G18.9)")"Dens  =",ss_dens(:Nspin*Norb)
     write(*,"(A7,12G18.9)")"Sz+1/2=",ss_Sz(:Nspin*Norb)+0.5d0
     write(*,*)""
     write(*,"(A7,12G18.9)")"Lambda=",lambda(:Nspin*Norb)
     write(*,"(A7,12G18.9)")"F_ss  =",ss_Dens(:Nspin*Norb) - (ss_Sz(:Nspin*Norb) + 0.5d0)
     if(verbose>2)call stop_timer()
     write(*,*)""
     write(*,*)""
  endif
end subroutine ss_lf_solve



function solve_Hps(lambda) result(Fss)
  real(8),dimension(:),intent(in) :: lambda
  real(8),dimension(size(lambda)) :: fss
  !
  siter=siter+1
  ss_lambda(1:Nso) = lambda
  if(Nspin==1)call ss_spin_symmetry(ss_lambda)
  !
  call ss_solve_spins
  !
  fss = (ss_Dens(:Nso) - (ss_Sz(:Nso) + 0.5d0))
  if(verbose>1)write(*,"(I18,20G16.7)")siter,Fss(:Nso),ss_lambda(:Nso)
end function solve_Hps
